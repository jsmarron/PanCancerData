disp('Running MATLAB script file PanCan3.m') ;
%
%    For analysis of TCGA PanCan data set from Chris Fan
%    12 Cancer Types
%
%    Goals of this third analysis:
%        - Focus on subset of cases:  BLCA,KIRC,LUAD,LUSC,HNSC,BRCA, 
%                    thus eliminating  LAML,GBM,OV,UCEC,READ,COAD
%        - Repeat previous analyses
%        - Do pairwise analyses
%
%    Main input files are:  PanCan1.mat  &  PanCan1A.mat
%    Which were generated by PanCan1.m
%
%    That was based on:     kviao.pancan12tu.txt
%        Note 1st three lines have text:
%            - Long names
%            - Cancer Type
%            - Platform
%        Remaining lines 4 - 12485 are Gene Expression
%
%    PanCan1.mat contains:
%        mdata:         Matrix of Gene Expression
%        caGeneName:    Cell Array of Gene Names
%        caCLID         Cell Array of Case identifiers
%        caCanType      Cell Array of Cancer Types
%        caPlatform     Cell Array of Platforms
%
%    PanCan1A.mat contains:
%        mdatan:         Matrix of Gene Expression, where:
%                             Missings have been replaced by 0
%                             Negatives have been floored to 0
%                             Each gene has been median centered 
%                                 (w/ respect to 12 classes)
%

ipart = 8 ;    %  1 - MargDist plots
               %  2 - PCA Scatterplots
               %  3 - MD & DWD Classify each type versus the rest
               %  4 - Look for important genes, each vs. the rest 
               %  5 - Explore LUAD vs. LUSC
               %  6 - Summarize Important Genes (from parts 3,4)
               %  7 - Pairwise classifications - all MD & DWD directions
               %  8 - Pairwise classifications - all pairwise DiProPerms
               %  9 - Pairwise classifications - important genes
               


savefilestr = 'PanCan1.mat' ;
savefileAstr = 'PanCan1A.mat' ;
    %  Actually these are for file reading
xlsfilestr = 'PanCan3Genes' ;

ntopbot = 20 ;
    %  Number of top and bottme genes to save
    %  Changing this requires rerunning of both ipart = 3 & 4

disp(' ') ;
disp('    Start 1st .mat file read') ;
load(savefilestr) ;
%    Loads Variables:
%        mdata:         Matrix of Gene Expression
%        caGeneName:    Cell Array of Gene Names
%        caCLID         Cell Array of Case identifiers
%        caCanType      Cell Array of Cancer Types
%        caPlatform     Cell Array of Platforms

mdata = [] ;
    %  to save space, since work only with normalized data here 

disp('    Start .mat file read') ;
load(savefileAstr) ;
%    Loads Variable:
%        mdatan:         Matrix of Gene Expression

disp('   Data loading finished') ;


%  Reduce to 6 types
%
nall = size(mdatan,2) ;
mcolorbase = RainbowColorsQY(6) ;
caCTnamebase = {'BLCA' 'KIRC' 'LUAD' 'LUSC' 'HNSC' 'BRCA'} ;

vBLCAflagall = zeros(1,nall) ;
vKIRCflagall = zeros(1,nall) ;
vLUADflagall = zeros(1,nall) ;
vLUSCflagall = zeros(1,nall) ;
vHNSCflagall = zeros(1,nall) ;
vBRCAflagall = zeros(1,nall) ;
mcolorall = zeros(nall,3) ;
markerstrall = [] ;
for i = 1:nall ;
  if strcmp(caCanType{i},'BLCA') ;
    vBLCAflagall(i) = 1 ;
    mcolorall(i,:) = mcolorbase(1,:) ;
    markerstrall = strvcat(markerstrall,'s') ;
  elseif strcmp(caCanType{i},'KIRC') ;
    vKIRCflagall(i) = 1 ;
    mcolorall(i,:) = mcolorbase(2,:) ;
    markerstrall = strvcat(markerstrall,'d') ;
  elseif strcmp(caCanType{i},'LUAD') ;
    vLUADflagall(i) = 1 ;
    mcolorall(i,:) = mcolorbase(3,:) ;
    markerstrall = strvcat(markerstrall,'x') ;
  elseif strcmp(caCanType{i},'LUSC') ;
    vLUSCflagall(i) = 1 ;
    mcolorall(i,:) = mcolorbase(4,:) ;
    markerstrall = strvcat(markerstrall,'*') ;
  elseif strcmp(caCanType{i},'HNSC') ;
    vHNSCflagall(i) = 1 ;
    mcolorall(i,:) = mcolorbase(5,:) ;
    markerstrall = strvcat(markerstrall,'+') ;
  elseif strcmp(caCanType{i},'BRCA') ;
    vBRCAflagall(i) = 1 ;
    mcolorall(i,:) = mcolorbase(6,:) ;
    markerstrall = strvcat(markerstrall,'o') ;
  else ;
    markerstrall = strvcat(markerstrall,'.') ;
    disp(['    Skipping Type ' caCanType{i}]) ;
  end ;
end ;
vBLCAflagall = logical(vBLCAflagall) ;
vKIRCflagall = logical(vKIRCflagall) ;
vLUADflagall = logical(vLUADflagall) ;
vLUSCflagall = logical(vLUSCflagall) ;
vHNSCflagall = logical(vHNSCflagall) ;
vBRCAflagall = logical(vBRCAflagall) ;
vkeepflag = vBLCAflagall|vKIRCflagall|vLUADflagall|vLUSCflagall|vHNSCflagall|vBRCAflagall ;

n = sum(vkeepflag) ;
vBLCAflag = vBLCAflagall(vkeepflag) ;
vKIRCflag = vKIRCflagall(vkeepflag) ;
vLUADflag = vLUADflagall(vkeepflag) ;
vLUSCflag = vLUSCflagall(vkeepflag) ;
vHNSCflag = vHNSCflagall(vkeepflag) ;
vBRCAflag = vBRCAflagall(vkeepflag) ;
mCTflag = [vBLCAflag; ...
           vKIRCflag; ...
           vLUADflag; ...
           vLUSCflag; ...
           vHNSCflag; ...
           vBRCAflag] ;
mdatar = mdatan(:,vkeepflag') ;
mcolorr = mcolorall(vkeepflag,:) ;
markerstrr = markerstrall(vkeepflag) ;
d = size(mdatar,1) ;

mdatan = [] ; 
    %  to save space


if ipart == 1 ;    %  MargDist plots

  %  Make Color Plot with Cancer Type Colors
  %
  figure(1) ;
  clf ;
  axis([0 1 0 1]) ;
  nct = 6 ;
  text(0.2,(nct + 1) / (nct + 2), ...
       'Type','Color','k','FontSize',24) ;
  text(0.5,(nct + 1) / (nct + 2), ...
       'n','Color','k','FontSize',24) ;
  text(0.8,(nct + 1) / (nct + 2), ...
       '%','Color','k','FontSize',24) ;
  for ict = 1:nct ;
    text(0.2,(nct - ict + 1) / (nct + 2), ...
         caCTnamebase{ict}, ...
         'Color',mcolorbase(ict,:), ...
         'FontSize',24) ;
    text(0.5,(nct - ict + 1) / (nct + 2), ...
         num2str(sum(mCTflag(ict,:))), ...
         'Color',mcolorbase(ict,:), ...
         'FontSize',24) ;
    text(0.8,(nct - ict + 1) / (nct + 2), ...
         num2str(100 * sum(mCTflag(ict,:)) / n,3), ...
         'Color',mcolorbase(ict,:), ...
         'FontSize',24) ;
  end ;
  orient landscape ;
  savestr = ['PanCan3ip' num2str(ipart) 'CancerTypeColors-Counts'] ;
  print('-dpsc2',savestr) ;

  %  Make Mean MargDistPlot
  %
  figure(2) ;
  clf ;
  varnamecellstr = {caGeneName} ;
  titlecellstr = {{'Summary Stats (means)' ...
                   'Reduced Data Set, median centered' ...
                   ['n = ' num2str(n) '# genes, d = ' num2str(d)] ...
                   '7 smallest & 8 biggest'}} ;
  savestr = ['PanCan3ip' num2str(ipart) 'MargDistMean'] ;
  paramstruct = struct('istat',1, ...
                       'varnamecellstr',varnamecellstr, ...
                       'viplot',[(1:7), ((d - 7):d)], ...
                       'icolor',mcolorr, ...
                       'markerstr',markerstrr, ...
                       'isubpopkde',1, ...
                       'datovlaymax',0.9, ...
                       'datovlaymin',0.4, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr) ;
  MargDistPlotSM(mdatar,paramstruct) ;

  %  Make SD MargDistPlot
  %
  figure(3) ;
  clf ;
  varnamecellstr = {caGeneName} ;
  titlecellstr = {{'Summary Stats (SD)' ...
                   'Reduced Data Set, median centered' ...
                   ['n = ' num2str(n) '# genes, d = ' num2str(d)] ...
                   '7 smallest & 8 biggest'}} ;
  savestr = ['PanCan3ip' num2str(ipart) 'MargDistSD'] ;
  paramstruct = struct('istat',2, ...
                       'varnamecellstr',varnamecellstr, ...
                       'viplot',[(1:7), ((d - 7):d)], ...
                       'icolor',mcolorr, ...
                       'markerstr',markerstrr, ...
                       'isubpopkde',1, ...
                       'datovlaymax',0.9, ...
                       'datovlaymin',0.4, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr) ;
  MargDistPlotSM(mdatar,paramstruct) ;

  %  Make Skewness MargDistPlot
  %
  figure(3) ;
  clf ;
  varnamecellstr = {caGeneName} ;
  titlecellstr = {{'Summary Stats (Skewness)' ...
                   'Reduced Data Set, median centered' ...
                   ['n = ' num2str(n) '# genes, d = ' num2str(d)] ...
                   '7 smallest & 8 biggest'}} ;
  savestr = ['PanCan3ip' num2str(ipart) 'MargDistSkew'] ;
  paramstruct = struct('istat',3, ...
                       'varnamecellstr',varnamecellstr, ...
                       'viplot',[(1:7), ((d - 7):d)], ...
                       'icolor',mcolorr, ...
                       'markerstr',markerstrr, ...
                       'isubpopkde',1, ...
                       'datovlaymax',0.9, ...
                       'datovlaymin',0.4, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr) ;
  MargDistPlotSM(mdatar,paramstruct) ;

  %  Make Kurtosis MargDistPlot
  %
  figure(4) ;
  clf ;
  varnamecellstr = {caGeneName} ;
  titlecellstr = {{'Summary Stats (Kurtosis)' ...
                   'Reduced Data Set, median centered' ...
                   ['n = ' num2str(n) '# genes, d = ' num2str(d)] ...
                   '7 smallest & 8 biggest'}} ;
  savestr = ['PanCan3ip' num2str(ipart) 'MargDistKurt'] ;
  paramstruct = struct('istat',4, ...
                       'varnamecellstr',varnamecellstr, ...
                       'viplot',[1:15], ...
                       'icolor',mcolorr, ...
                       'markerstr',markerstrr, ...
                       'isubpopkde',1, ...
                       'datovlaymax',0.9, ...
                       'datovlaymin',0.4, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr) ;
  MargDistPlotSM(mdatar,paramstruct) ;


elseif ipart == 2 ;    %  PCA Scatterplots

  %  PCA scatterplot, all together
  %
  figure(1) ;
  clf ;
  titlecellstr = {{'PanCan Gene Expression, 2013' ...
                   [num2str(size(mcolorbase,1)) 'Cancer Types'] ...
                   'Reduced Data Set, median centered' ...
                   ['n = ' num2str(n) '# genes, d = ' num2str(d)]}} ;
  labelcellstr = {{'PC 1 Scores' 'PC 2 Scores' 'PC 3 Scores' 'PC 4 Scores'}} ;
  savestr = ['PanCan3ip' num2str(ipart) 'AllDataPCA'] ;
  paramstruct = struct('npcadiradd',4, ...
                       'icolor',mcolorr, ...
                       'markerstr',markerstrr, ...
                       'isubpopkde',1, ...
                       'ibelowdiag',0, ...
                       'titlecellstr',titlecellstr, ...
                       'labelcellstr',labelcellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdatar,[],paramstruct) ;

  %  Make some zoomed in plots
  %
  paramstruct = struct('npc',4, ...
                       'iorient',3, ...
                       'iscreenwrite',1, ...
                       'viout',[0 0 0 0 1]) ;
  outstruct = pcaSM(mdatar,paramstruct) ;
  mpc = getfield(outstruct,'mpc') ;
      %  4 x n matrix of PC scores

  figure(2) ;
  clf ;
  savestr = ['PanCan3ip' num2str(ipart) 'AllData-PC1v2'] ;
  paramstruct = struct('icolor',mcolorr, ...
                       'markerstr',markerstrr, ...
                       'titlestr','Zoomed in PanCan Reduced', ...
                       'xlabelstr','PC 2 Scores', ...
                       'ylabelstr','PC 1 Scores', ...
                       'legendcellstr',{caCTnamebase}, ...
                       'mlegendcolor',mcolorbase, ...
                       'ifigure',2, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  projplot2SM(mpc,[[0; 1; 0; 0],[1; 0; 0; 0]],paramstruct) ;

  figure(3) ;
  clf ;
  savestr = ['PanCan3ip' num2str(ipart) 'AllData-PC3v4'] ;
  paramstruct = struct('icolor',mcolorr, ...
                       'markerstr',markerstrr, ...
                       'titlestr','Zoomed in PanCan Reduced', ...
                       'xlabelstr','PC 4 Scores', ...
                       'ylabelstr','PC 3 Scores', ...
                       'legendcellstr',{caCTnamebase}, ...
                       'mlegendcolor',mcolorbase, ...
                       'ifigure',3, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  projplot2SM(mpc,[[0; 0; 0; 1],[0; 0; 1; 0]],paramstruct) ;


elseif ipart == 3 ;    %  MD Classify each type versus the rest

  xlswrite(xlsfilestr,{'Output from PanCan3 - Important Gene Results'}, ...
      'Background','A1') ;
  xlswrite(xlsfilestr,{'This stores lists of top & bottom genes'}, ...
      'Background','A3') ;
  xlswrite(xlsfilestr,{'For both one vs. all, and also pairwise analyses'}, ...
      'Background','A5') ;
  xlswrite(xlsfilestr,{'Many aspects are organized by sheet names'}, ...
      'Background','A7') ;
  xlswrite(xlsfilestr,{['Ultimate goal is, for each cancer type, ' ...
      'to score genes in two ways:']},'Background','A9') ;
  xlswrite(xlsfilestr,{'    1.  By number of appearances.'}, ...
      'Background','A10') ;
  xlswrite(xlsfilestr,{['    2.  By Rank Scores:  ' num2str(ntopbot) ...
      ' for top, ' num2str(ntopbot) ' for 2nd, ...']},'Background','A11') ;


  for ict = 1:length(caCTnamebase) ;

    strct = caCTnamebase{ict} ;
    vCTflag = mCTflag(ict,:) ;
    nct = sum(vCTflag) ;

    vgray = [0.5 0.5 0.5] ;
    icolor = [mcolorbase(ict,:); vgray] ;
    mcolorct = ones(n,1) * vgray ;
    mcolorct(vCTflag,:) = mcolorr(vCTflag,:) ;

    disp(' ') ;
    disp(['    Working on Cancer Type ' strct]) ;

    %  Compute  directions
    %
    DWDdirn = DWD2XQ(mdatar(:,vCTflag),mdatar(:,~vCTflag)) ;
    MDdirn = mean(mdatar(:,vCTflag),2) - mean(mdatar(:,~vCTflag),2) ;
    MDdirn = MDdirn / norm(MDdirn) ;

    %  Make MD scatterplot
    %
    figure(1) ;
    clf ;
    titlecellstr = {{['PanCan, 2013, ' strct ' vs. Rest'] ...
                     ['n = ' num2str(nct) ' / ' num2str(n) ...
                      ', d = ' num2str(d)]}} ;
    labelcellstr = {{['MD '  strct ' v Rest'] 'OPC 1 Scores'}} ;
    savestr = ['PanCan3ip' num2str(ipart) strct '-MDvsRestnOPCA'] ;
    paramstruct = struct('npcadiradd',-1, ...
                         'icolor',mcolorct, ...
                         'isubpopkde',1, ...
                         'ibelowdiag',1, ...
                         'titlecellstr',titlecellstr, ...
                         'labelcellstr',labelcellstr, ...
                         'savestr',savestr, ...
                         'iscreenwrite',1) ;
    scatplotSM(mdatar,MDdirn,paramstruct) ;

    %  Make DWD scatterplot
    %
    figure(2) ;
    clf ;
    titlecellstr = {{['PanCan, 2013, ' strct ' vs. Rest'] ...
                     ['n = ' num2str(nct) ' / ' num2str(n) ...
                      ', d = ' num2str(d)]}} ;
    labelcellstr = {{['DWD '  strct ' v Rest'] 'OPC 1 Scores'}} ;
    savestr = ['PanCan3ip' num2str(ipart) strct '-DWDvsRestnOPCA'] ;
    paramstruct = struct('npcadiradd',-1, ...
                         'icolor',mcolorct, ...
                         'isubpopkde',1, ...
                         'ibelowdiag',1, ...
                         'titlecellstr',titlecellstr, ...
                         'labelcellstr',labelcellstr, ...
                         'savestr',savestr, ...
                         'iscreenwrite',1) ;
    scatplotSM(mdatar,DWDdirn,paramstruct) ;

%{
    %  MD DiProPerm 
    %
    figure(3) ;
    clf ;
    icolor = [mcolorbase(ict,:); vgray] ;
    savestr = ['PanCan3ip' num2str(ipart) strct '-MDvRestDiProPerm'] ;
    paramstruct = struct('idir',2, ...
                         'nsim',100, ...
                         'nreport',5, ...
                         'icolor',icolor, ...
                         'title1str','PanCan 2013 data', ...
                         'title2str',['MD DiProPerm ' strct ' v, Rest'], ...
                         'savestr',savestr, ...
                         'iscreenwrite',1) ;
    DiProPermSMnew(mdatar(:,vCTflag),mdatar(:,~vCTflag),paramstruct) ;

    %  DWD DiProPerm 
    %
    figure(4) ;
    clf ;
    icolor = [mcolorbase(ict,:); vgray] ;
    savestr = ['PanCan3ip' num2str(ipart) strct '-DWDvRestDiProPerm'] ;
    paramstruct = struct('idir',1, ...
                         'nsim',100, ...
                         'nreport',5, ...
                         'icolor',icolor, ...
                         'title1str','PanCan 2013 data', ...
                         'title2str',['DWD DiProPerm ' strct ' v, Rest'], ...
                         'savestr',savestr, ...
                         'iscreenwrite',1) ;
    DiProPermSMnew(mdatar(:,vCTflag),mdatar(:,~vCTflag),paramstruct) ;
%}

    %  Look at MD drivers of difference
    %
    figure(5) ;
    clf ;
    titlestr = ['MD Loadings, ' strct ' vs. Rest'] ;
    savestr = ['PanCan3ip' num2str(ipart) strct '-MDvRestLoadings'] ;
    paramstruct = struct('isort',2, ...
                         'nshow',20, ...
                         'fontsize',15, ...
                         'titlestr',titlestr, ...
                         'ylabelstr','MD Loadings', ...
                         'savestr',savestr) ;
    LabeledBarPlotSM(MDdirn,caGeneName,paramstruct) ;

    %  Look at DWD drivers of difference
    %
    figure(6) ;
    clf ;
    titlestr = ['DWD Loadings, ' strct ' vs. Rest'] ;
    savestr = ['PanCan3ip' num2str(ipart) strct '-DWDvRestLoadings'] ;
    paramstruct = struct('isort',2, ...
                         'nshow',20, ...
                         'fontsize',15, ...
                         'titlestr',titlestr, ...
                         'ylabelstr','DWD Loadings', ...
                         'savestr',savestr) ;
    LabeledBarPlotSM(DWDdirn,caGeneName,paramstruct) ;

    %  Save top-bottom gene names to xls file
    %
    disp('Generating XSL output') ;
    sheetstr = [strct 'vRest'] ;
    xlswrite(xlsfilestr,{['Important Genes for ' strct ' vs. the rest']}, ...
        sheetstr,'A1') ;
    xlswrite(xlsfilestr,{['Note:  Top refers to genes placing ' strct ' on the right']}, ...
        sheetstr,'A2') ;

    xlswrite(xlsfilestr,{'Rank'},sheetstr,'A4') ;
    xlswrite(xlsfilestr,{'Score'},sheetstr,'B4') ;

    xlswrite(xlsfilestr,{'Top MD Names'},sheetstr,'C4') ;
    xlswrite(xlsfilestr,{'Top MD Loadings'},sheetstr,'D4') ;
    xlswrite(xlsfilestr,{'Bottom MD Names'},sheetstr,['C' num2str(ntopbot + 6)]) ;
    xlswrite(xlsfilestr,{'Bottom MD Loadings'},sheetstr,['D' num2str(ntopbot + 6)]) ;

    xlswrite(xlsfilestr,{'Top DWD Names'},sheetstr,'E4') ;
    xlswrite(xlsfilestr,{'Top DWD Loadings'},sheetstr,'F4') ;
    xlswrite(xlsfilestr,{'Bottom DWD Names'},sheetstr,['E' num2str(ntopbot + 6)]) ;
    xlswrite(xlsfilestr,{'Bottom DWD Loadings'},sheetstr,['F' num2str(ntopbot + 6)]) ;

    %  Write MD & DWD Genes & Loadings
    %
    vindall = 1:d ;
    [temp,MDvind] = sort(MDdirn,'descend') ;
    [temp,DWDvind] = sort(DWDdirn,'descend') ;
    for irow = 1:ntopbot ;
      xlswrite(xlsfilestr,irow,sheetstr,['A' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,(ntopbot - irow + 1),sheetstr,['B' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,vindall(d - ntopbot + irow),sheetstr, ...
               ['A' num2str(irow + ntopbot + 6)]) ;
      xlswrite(xlsfilestr,irow,sheetstr, ...
               ['B' num2str(irow + ntopbot + 6)]) ;

      xlswrite(xlsfilestr,caGeneName(MDvind(irow)),sheetstr,['C' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,MDdirn(MDvind(irow)),sheetstr,['D' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,caGeneName(MDvind(vindall(d - ntopbot + irow))),sheetstr, ...
               ['C' num2str(irow + ntopbot + 6)]) ;
      xlswrite(xlsfilestr,MDdirn(MDvind(vindall(d - ntopbot + irow))),sheetstr, ...
               ['D' num2str(irow + ntopbot + 6)]) ;

      xlswrite(xlsfilestr,caGeneName(DWDvind(irow)),sheetstr,['E' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,DWDdirn(DWDvind(irow)),sheetstr,['F' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,caGeneName(DWDvind(vindall(d - ntopbot + irow))),sheetstr, ...
               ['E' num2str(irow + ntopbot + 6)]) ;
      xlswrite(xlsfilestr,DWDdirn(DWDvind(vindall(d - ntopbot + irow))),sheetstr, ...
               ['F' num2str(irow + ntopbot + 6)]) ;

    end ;    %  of irow (in Excel File) loop

  end ;    %  of ict loop


elseif ipart == 4 ;    %  Look for important genes, each vs. the rest 

  for ict = 1:length(caCTnamebase) ;

    strct = caCTnamebase{ict} ;
    vCTflag = mCTflag(ict,:) ;
    nct = sum(vCTflag) ;

    vgray = [0.5 0.5 0.5] ;
    icolor = [mcolorbase(ict,:); vgray] ;
    mcolorct = ones(n,1) * vgray ;
    mcolorct(vCTflag,:) = mcolorr(vCTflag,:) ;

    disp(' ') ;
    disp(['    Working on Cancer Type ' strct]) ;

    %  Make T-pval Marginal Overlap Plot    
    %
    disp('Start Marg Dist Graphics') ;
    figure(1) ;
    clf ;
    titlecellstr = {{['Marginal Overlap, T-pval'] ...
                     ['PanCan, 2013, ' strct ' vs. Rest'] ...
                     ['n = ' num2str(nct) ' / ' num2str(n) ...
                      ', d = ' num2str(d)]}} ;
    savestr = ['PanCan3ip' num2str(ipart) strct '-MargOverlapTvRest'] ;
    paramstruct = struct('ioverlap',1, ...
                         'varnamecellstr',{caGeneName}, ...
                         'icolor',icolor, ...
                         'isubpopkde',1, ...
                         'titlecellstr',titlecellstr, ...
                         'savestr',savestr) ;
    MargOverlapSM(mdatar,vCTflag,paramstruct) ;

    %  Make ROC Marginal Overlap Plot    
    %
    figure(2) ;
    clf ;
    titlecellstr = {{['Marginal Overlap, AUC-ROC'] ...
                     ['PanCan, 2013, ' strct ' vs. Rest'] ...
                     ['n = ' num2str(nct) ' / ' num2str(n) ...
                      'd = ' num2str(d)]}} ;
    savestr = ['PanCan3ip' num2str(ipart) strct '-AUCMargOverlapROCvRest'] ;
    paramstruct = struct('ioverlap',5, ...
                         'varnamecellstr',{caGeneName}, ...
                         'icolor',icolor, ...
                         'isubpopkde',1, ...
                         'titlecellstr',titlecellstr, ...
                         'savestr',savestr) ;
    MargOverlapSM(mdatar,vCTflag,paramstruct) ;

    %  Make Individual Type Mean MargDistPlot
    %
    figure(3) ;
    clf ;
    titlecellstr = {{'Summary Stats (means)' ...
                     strct ...
                     'Full data median centered' ...
                     '7 smallest & 8 biggest'}} ;
    savestr = ['PanCan3ip' num2str(ipart) strct '-IndivMargDistMean'] ;
    paramstruct = struct('istat',1, ...
                         'varnamecellstr',{caGeneName}, ...
                         'viplot',[(1:7), ((d - 7):d)], ...
                         'icolor',mcolorr(vCTflag,:), ...
                         'datovlaymax',0.9, ...
                         'datovlaymin',0.4, ...
                         'titlecellstr',titlecellstr, ...
                         'savestr',savestr) ;
    MargDistPlotSM(mdatar(:,vCTflag),paramstruct) ;


    %  Write to Excel File
    %
    disp('Generating XSL output') ;
    sheetstr = [strct 'vRest'] ;

    tscore = zeros(d,1) ;
    ROCscore = zeros(d,1) ;
    for i = 1:d ;

      %  Compute t p-val
      %
      [H,p] = ttest2(mdatar(i,vCTflag),mdatar(i,~vCTflag),'vartype','unequal') ; 
       if isnan(p) ;    %  Happens when both variances are 0
          olmeas = 0 ;    %  Inconclusive version of log p
       else ;    %  Have useful p-val
        if mean(mdatar(i,vCTflag)) > mean(mdatar(i,~vCTflag)) ;
          olmeas = log10(p) ;    %  Use as is
        else
          olmeas = -log10(p) ;    %  Flips direction, think of log(1 - p)
        end ;
      end ;
      tscore(i) = olmeas ;

      %  Compute ROC AUC
      %
      [RCcurve,AUC] = ROCcurveSM(mdatar(i,vCTflag)',mdatar(i,~vCTflag)',0) ;
      ROCscore(i) = AUC ;

    end ;    %  of i-loop through genes

    imscore = mean(mdatar(:,vCTflag),2) ;

    [temp,tvind] = sort(tscore,'ascend') ;
    [temp,ROCvind] = sort(ROCscore,'descend') ;
    [temp,imvind] = sort(imscore,'descend') ;


    %  Save top-bottom gene names to xls file
    %
    xlswrite(xlsfilestr,{'Top t Names'},sheetstr,'G4') ;
    xlswrite(xlsfilestr,{'Top t p-vals'},sheetstr,'H4') ;
    xlswrite(xlsfilestr,{'Bottom t Names'},sheetstr,['G' num2str(ntopbot + 6)]) ;
    xlswrite(xlsfilestr,{'Bottom t p-vals'},sheetstr,['H' num2str(ntopbot + 6)]) ;

    xlswrite(xlsfilestr,{'Top ROC Names'},sheetstr,'I4') ;
    xlswrite(xlsfilestr,{'Top ROC AUC'},sheetstr,'J4') ;
    xlswrite(xlsfilestr,{'Bottom ROC Names'},sheetstr,['I' num2str(ntopbot + 6)]) ;
    xlswrite(xlsfilestr,{'Bottom ROC AUCs'},sheetstr,['J' num2str(ntopbot + 6)]) ;

    xlswrite(xlsfilestr,{'Top I-Mean Names'},sheetstr,'K4') ;
    xlswrite(xlsfilestr,{'Top I-Means'},sheetstr,'L4') ;
    xlswrite(xlsfilestr,{'Bottom I-Mean Names'},sheetstr,['K' num2str(ntopbot + 6)]) ;
    xlswrite(xlsfilestr,{'Bottom I-Means'},sheetstr,['L' num2str(ntopbot + 6)]) ;

    %  Write Gene Names and Scores
    %
    vindall = 1:d ;
    for irow = 1:ntopbot ;

      xlswrite(xlsfilestr,caGeneName(tvind(irow)),sheetstr,['G' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,tscore(tvind(irow)),sheetstr,['H' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,caGeneName(tvind(vindall(d - ntopbot + irow))),sheetstr, ...
               ['G' num2str(irow + ntopbot + 6)]) ;
      xlswrite(xlsfilestr,tscore(tvind(vindall(d - ntopbot + irow))),sheetstr, ...
               ['H' num2str(irow + ntopbot + 6)]) ;

      xlswrite(xlsfilestr,caGeneName(ROCvind(irow)),sheetstr,['I' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,ROCscore(ROCvind(irow)),sheetstr,['J' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,caGeneName(ROCvind(vindall(d - ntopbot + irow))),sheetstr, ...
               ['I' num2str(irow + ntopbot + 6)]) ;
      xlswrite(xlsfilestr,ROCscore(ROCvind(vindall(d - ntopbot + irow))),sheetstr, ...
               ['J' num2str(irow + ntopbot + 6)]) ;

      xlswrite(xlsfilestr,caGeneName(imvind(irow)),sheetstr,['K' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,imscore(imvind(irow)),sheetstr,['L' num2str(irow + 4)]) ;
      xlswrite(xlsfilestr,caGeneName(imvind(vindall(d - ntopbot + irow))),sheetstr, ...
               ['K' num2str(irow + ntopbot + 6)]) ;
      xlswrite(xlsfilestr,imscore(imvind(vindall(d - ntopbot + irow))),sheetstr, ...
               ['L' num2str(irow + ntopbot + 6)]) ;

    end ;    %  of irow (in Excel File) loop


%pauseSM    

  end ;    %  of ict loop


elseif ipart == 5 ;    %  Explore LUAD vs. LUSC

  %  Keep only data in Adeno and Squamous subtypes
  %
  mdataavs = mdatar(:,vLUADflag|vLUSCflag) ;
  navs = size(mdataavs,2) ;
  mcoloravs = mcolorr((vLUADflag|vLUSCflag)',:) ;
  markerstravs = markerstrr((vLUADflag|vLUSCflag)') ;
  vAflag = vLUADflag(vLUADflag|vLUSCflag) ;
      %  one (in avs subset) where have an Adeno

  %  PCA scatterplot
  %
  figure(1) ;
  clf ;
  titlecellstr = {{['PanCan, 2013, Compare LUAD & LUSC'] ...
                    'PCA Scatterplot' ...
                   ['n = ' num2str(navs) ' / ' num2str(n) ...
                    ', d = ' num2str(d)]}} ;
  labelcellstr = {{'PC 1 Scores' 'PC 2 Scores' 'PC 3 Scores' 'PC 4 Scores'}} ;
  savestr = ['PanCan3ip' num2str(ipart) 'AdenvSquaPCA'] ;
  paramstruct = struct('npcadiradd',4, ...
                       'icolor',mcoloravs, ...
                       'markerstr',markerstravs, ...
                       'isubpopkde',1, ...
                       'ibelowdiag',1, ...
                       'legendcellstr',{{caCTnamebase{[3 4]}}}, ...
                       'mlegendcolor',mcolorbase([3; 4],:), ...
                       'titlecellstr',titlecellstr, ...
                       'labelcellstr',labelcellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdataavs,[],paramstruct) ;

  %  Compute  directions
  %
  DWDdirn = DWD2XQ(mdataavs(:,vAflag),mdataavs(:,~vAflag)) ;
  MDdirn = mean(mdataavs(:,vAflag),2) - mean(mdataavs(:,~vAflag),2) ;
  MDdirn = MDdirn / norm(MDdirn) ;

  %  MD, DWD, Ortho PCA scatterplot
  %
  figure(2) ;
  clf ;
  titlecellstr = {{['PanCan, 2013, Study LUAD & LUSC'] ...
                    'MD, DWD and Ortho PCA' ...
                    'Possible misclass?' ...
                    ['n = ' num2str(navs) ' / ' num2str(n) ...
                     ', d = ' num2str(d)]}} ;
  labelcellstr = {{'MD Scores' 'DWD Scores' 'OPC 1 Scores' 'OPC 2 Scores'}} ;
  savestr = ['PanCan3ip' num2str(ipart) 'AdenvSquaMDnDWDnOPCA'] ;
  paramstruct = struct('npcadiradd',-2, ...
                       'icolor',mcoloravs, ...
                       'markerstr',markerstravs, ...
                       'isubpopkde',1, ...
                       'ibelowdiag',1, ...
                       'legendcellstr',{{caCTnamebase{[3 4]}}}, ...
                       'mlegendcolor',mcolorbase([3; 4],:), ...
                       'titlecellstr',titlecellstr, ...
                       'labelcellstr',labelcellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdataavs,[MDdirn DWDdirn],paramstruct) ;


  %  Try brushing LUSC with PC1 > 50
  %
  paramstruct = struct('npc',1, ...
                       'iorient',3, ...
                       'iscreenwrite',1, ...
                       'viout',[0 0 0 0 1]) ;
  outstruct = pcaSM(mdataavs,paramstruct) ;
  mpc = getfield(outstruct,'mpc') ;
      %  1 x n matrix of PC scores
  vflagb = (mpc > 50) & (~vAflag) ;
  mcoloravsb = mcoloravs ;
  mcoloravsb(vflagb',:) = ones(sum(vflagb),1) * [1 0 0] ;

  figure(3) ;
  clf ;
  titlecellstr = {{['PanCan, 2013, Compare LUAD & LUSC'] ...
                    'PCA Scatterplot' ...
                    'Brush 1, of some Squamous' ...
                   ['n = ' num2str(navs) ' / ' num2str(n) ...
                    ', d = ' num2str(d)]}} ;
  labelcellstr = {{'PC 1 Scores' 'PC 2 Scores' 'PC 3 Scores' 'PC 4 Scores'}} ;
  savestr = ['PanCan3ip' num2str(ipart) 'AdenvSquaPCA-Brush1'] ;
  paramstruct = struct('npcadiradd',4, ...
                       'icolor',mcoloravsb, ...
                       'markerstr',markerstravs, ...
                       'isubpopkde',1, ...
                       'ibelowdiag',1, ...
                       'legendcellstr',{{caCTnamebase{[3 4]}}}, ...
                       'mlegendcolor',mcolorbase([3; 4],:), ...
                       'titlecellstr',titlecellstr, ...
                       'labelcellstr',labelcellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdataavs,[],paramstruct) ;

  figure(4) ;
  clf ;
  titlecellstr = {{['PanCan, 2013, Study LUAD & LUSC'] ...
                    'MD, DWD and Ortho PCA' ...
                    'Brush 1, of some Squamous' ...
                    ['n = ' num2str(navs) ' / ' num2str(n) ...
                     ', d = ' num2str(d)]}} ;
  labelcellstr = {{'MD Scores' 'DWD Scores' 'OPC 1 Scores' 'OPC 2 Scores'}} ;
  savestr = ['PanCan3ip' num2str(ipart) 'AdenvSquaMDnDWDnOPCA-Brush1'] ;
  paramstruct = struct('npcadiradd',-2, ...
                       'icolor',mcoloravsb, ...
                       'markerstr',markerstravs, ...
                       'isubpopkde',1, ...
                       'ibelowdiag',1, ...
                       'legendcellstr',{{caCTnamebase{[3 4]}}}, ...
                       'mlegendcolor',mcolorbase([3; 4],:), ...
                       'titlecellstr',titlecellstr, ...
                       'labelcellstr',labelcellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdataavs,[MDdirn DWDdirn],paramstruct) ;

  %  Re-Compute Directions with Brushed points reclassified as Adeno
  %
  vAB1flag = vAflag | vflagb ;
  DWDdirnB1 = DWD2XQ(mdataavs(:,vAB1flag),mdataavs(:,~vAB1flag)) ;
  MDdirnB1 = mean(mdataavs(:,vAB1flag),2) - mean(mdataavs(:,~vAB1flag),2) ;
  MDdirnB1 = MDdirnB1 / norm(MDdirnB1) ;

  figure(5) ;
  clf ;
  titlecellstr = {{['PanCan, 2013, Study LUAD & LUSC'] ...
                    'MD, DWD and Ortho PCA' ...
                    'Reclassified, Using Brush 1' ...
                    ['n = ' num2str(navs) ' / ' num2str(n) ...
                     ', d = ' num2str(d)]}} ;
  labelcellstr = {{'Brush 1 MD Scores' 'Brush 1 DWD Scores' 'OPC 1 Scores' 'OPC 2 Scores'}} ;
  savestr = ['PanCan3ip' num2str(ipart) 'AdenvSquaBrush1MDnDWDnOPCA'] ;
  paramstruct = struct('npcadiradd',-2, ...
                       'icolor',mcoloravsb, ...
                       'markerstr',markerstravs, ...
                       'isubpopkde',1, ...
                       'ibelowdiag',1, ...
                       'legendcellstr',{{caCTnamebase{[3 4]}}}, ...
                       'mlegendcolor',mcolorbase([3; 4],:), ...
                       'titlecellstr',titlecellstr, ...
                       'labelcellstr',labelcellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdataavs,[MDdirnB1 DWDdirnB1],paramstruct) ;


  %  DWD DiProPerm original LUAD vs. LUSC
  %
  figure(6) ;
  clf ;
  savestr = ['PanCan3ip' num2str(ipart) 'AdenvSquaDiProPerm'] ;
  paramstruct = struct('idir',1, ...
                       'nsim',100, ...
                       'nreport',5, ...
                       'icolor',mcolorbase([3; 4],:), ...
                       'title1str','PanCan 2013 data', ...
                       'title2str',['DWD DiProPerm LUAD v LUSC'], ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  DiProPermSMnew(mdataavs(:,vAflag),mdataavs(:,~vAflag),paramstruct) ;

  %  DWD DiProPerm Brush1 LUAD vs. LUSC
  %
  figure(7) ;
  clf ;
  savestr = ['PanCan3ip' num2str(ipart) 'AdenvSquaBrush1DiProPerm'] ;
  paramstruct = struct('idir',1, ...
                       'nsim',100, ...
                       'nreport',5, ...
                       'icolor',[[0 1 1]; [1 1 0]], ...
                       'title1str','PanCan 2013 data, Brush 1 Reclass', ...
                       'title2str',['DWD DiProPerm LUAD v LUSC'], ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  DiProPermSMnew(mdataavs(:,vAB1flag),mdataavs(:,~vAB1flag),paramstruct) ;


elseif ipart == 6 ;    %  Summarize Important Genes (from parts 3,4)

  %  Do this for each cancer type separately
  %
  for ict = 1:length(caCTnamebase) ;

    strct = caCTnamebase{ict} ;
    vCTflag = mCTflag(ict,:) ;
    nct = sum(vCTflag) ;

    vgray = [0.5 0.5 0.5] ;
    icolor = [mcolorbase(ict,:); vgray] ;
    mcolorct = ones(n,1) * vgray ;
    mcolorct(vCTflag,:) = mcolorr(vCTflag,:) ;

    sheetstr = [strct 'vRest'] ;

    disp(' ') ;
    disp(['Summarizing Important Genes for ' strct ' vs. the rest']) ;

    %  Read in Array of results from XLs spreadsheet
    %
    [num,txt] = xlsread(xlsfilestr,sheetstr) ;

    vtoprank = num(1:ntopbot,1) ;
    vtopscore = num(1:ntopbot,2) ;
    vtopMDload = num(1:ntopbot,4) ;
    vtopDWDload = num(1:ntopbot,6) ;
    vtoptstat = num(1:ntopbot,8) ;
    vtopROC = num(1:ntopbot,10) ;
    vtopImean = num(1:ntopbot,12) ;

    caGNtopMDload = txt(5:(ntopbot + 4),3) ;
    caGNtopDWDload = txt(5:(ntopbot + 4),5) ;
    caGNtoptstat = txt(5:(ntopbot + 4),7) ;
    caGNtopROC = txt(5:(ntopbot + 4),9) ;
    caGNtopImean = txt(5:(ntopbot + 4),11) ;

    vbottomrank = num((ntopbot + 3):(2 * ntopbot + 2),1) ;
    vbottomscore = num((ntopbot + 3):(2 * ntopbot + 2),2) ;
    vbottomMDload = num((ntopbot + 3):(2 * ntopbot + 2),4) ;
    vbottomDWDload = num((ntopbot + 3):(2 * ntopbot + 2),6) ;
    vbottomtstat = num((ntopbot + 3):(2 * ntopbot + 2),8) ;
    vbottomROC = num((ntopbot + 3):(2 * ntopbot + 2),10) ;
    vbottomImean = num((ntopbot + 3):(2 * ntopbot + 2),12) ;

    caGNbottomMDload = txt((ntopbot + 7):(2 * ntopbot + 6),3) ;
    caGNbottomDWDload = txt((ntopbot + 7):(2 * ntopbot + 6),5) ;
    caGNbottomtstat = txt((ntopbot + 7):(2 * ntopbot + 6),7) ;
    caGNbottomROC = txt((ntopbot + 7):(2 * ntopbot + 6),9) ;
    caGNbottomImean = txt((ntopbot + 7):(2 * ntopbot + 6),11) ;

    caGNtopall = {caGNtopMDload{1:end} caGNtopDWDload{1:end} ...
                  caGNtoptstat{1:end} caGNtopROC{1:end} caGNtopImean{1:end}} ;
    caGNtopuniq = unique(caGNtopall) ;
    nutop = length(caGNtopuniq) ;

    caGNbottomall = {caGNbottomMDload{1:end} caGNbottomDWDload{1:end} ...
                  caGNbottomtstat{1:end} caGNbottomROC{1:end} ...
                  caGNbottomImean{1:end}} ;
    caGNbottomuniq = unique(caGNbottomall) ;
    nubottom = length(caGNbottomuniq) ;

    vunumtop = zeros(1,nutop) ;
    vuscoretop = zeros(1,nutop) ;
    for iu = 1:nutop ;
      vflagtopMDload = ismember(caGNtopMDload,caGNtopuniq(iu)) ;
      vunumtop(iu) = vunumtop(iu) + sum(vflagtopMDload) ;
      vuscoretop(iu) = vuscoretop(iu) + sum(vtopscore(vflagtopMDload)) ;

      vflagtopDWDload = ismember(caGNtopDWDload,caGNtopuniq(iu)) ; 
      vunumtop(iu) = vunumtop(iu) + sum(vflagtopDWDload) ;
      vuscoretop(iu) = vuscoretop(iu) + sum(vtopscore(vflagtopDWDload)) ;

      vflagtoptstat = ismember(caGNtoptstat,caGNtopuniq(iu)) ;
      vunumtop(iu) = vunumtop(iu) + sum(vflagtoptstat) ;
      vuscoretop(iu) = vuscoretop(iu) + sum(vtopscore(vflagtoptstat)) ;

      vflagtopROC = ismember(caGNtopROC,caGNtopuniq(iu)) ;
      vunumtop(iu) = vunumtop(iu) + sum(vflagtopROC) ;
      vuscoretop(iu) = vuscoretop(iu) + sum(vtopscore(vflagtopROC)) ;

      vflagtopImean = ismember(caGNtopImean,caGNtopuniq(iu)) ;
      vunumtop(iu) = vunumtop(iu) + sum(vflagtopImean) ;
      vuscoretop(iu) = vuscoretop(iu) + sum(vtopscore(vflagtopImean)) ;
    end ;

    vunumbottom = zeros(1,nubottom) ;
    vuscorebottom = zeros(1,nubottom) ;
    for iu = 1:nubottom ;
      vflagbottomMDload = ismember(caGNbottomMDload,caGNbottomuniq(iu)) ;
      vunumbottom(iu) = vunumbottom(iu) + sum(vflagbottomMDload) ;
      vuscorebottom(iu) = vuscorebottom(iu) + sum(vbottomscore(vflagbottomMDload)) ;

      vflagbottomDWDload = ismember(caGNbottomDWDload,caGNbottomuniq(iu)) ; 
      vunumbottom(iu) = vunumbottom(iu) + sum(vflagbottomDWDload) ;
      vuscorebottom(iu) = vuscorebottom(iu) + sum(vbottomscore(vflagbottomDWDload)) ;

      vflagbottomtstat = ismember(caGNbottomtstat,caGNbottomuniq(iu)) ;
      vunumbottom(iu) = vunumbottom(iu) + sum(vflagbottomtstat) ;
      vuscorebottom(iu) = vuscorebottom(iu) + sum(vbottomscore(vflagbottomtstat)) ;

      vflagbottomROC = ismember(caGNbottomROC,caGNbottomuniq(iu)) ;
      vunumbottom(iu) = vunumbottom(iu) + sum(vflagbottomROC) ;
      vuscorebottom(iu) = vuscorebottom(iu) + sum(vbottomscore(vflagbottomROC)) ;

      vflagbottomImean = ismember(caGNbottomImean,caGNbottomuniq(iu)) ;
      vunumbottom(iu) = vunumbottom(iu) + sum(vflagbottomImean) ;
      vuscorebottom(iu) = vuscorebottom(iu) + sum(vbottomscore(vflagbottomImean)) ;
    end ;

    [temp, vindnumtop] = sort(vunumtop,'descend') ;
    [temp, vindscoretop] = sort(vuscoretop,'descend') ;
    [temp, vindnumbottom] = sort(vunumbottom,'descend') ;
    [temp, vindscorebottom] = sort(vuscorebottom,'descend') ;


%{
    %  Output Summaries to same spreadsheets
    %
    disp(' ') ;
    disp('    Generate XLS output') ;
    xlswrite(xlsfilestr,{'Top Summary by Counts'},sheetstr,['A' num2str(2 * ntopbot + 11)]) ;
    xlswrite(xlsfilestr,{'Top Summary by Scores'},sheetstr,['D' num2str(2 * ntopbot + 11)]) ;
    xlswrite(xlsfilestr,{'Bottom Summary by Counts'},sheetstr, ...
                         ['H' num2str(2 * ntopbot + 11)]) ;
    xlswrite(xlsfilestr,{'Bottom Summary by Scores'},sheetstr, ...
                         ['K' num2str(2 * ntopbot + 11)]) ;

    xlswrite(xlsfilestr,{'Gene'},sheetstr,['A' num2str(2 * ntopbot + 12)]) ;
    xlswrite(xlsfilestr,{'Count'},sheetstr,['B' num2str(2 * ntopbot + 12)]) ;
    xlswrite(xlsfilestr,{'Gene'},sheetstr,['D' num2str(2 * ntopbot + 12)]) ;
    xlswrite(xlsfilestr,{'Score'},sheetstr,['E' num2str(2 * ntopbot + 12)]) ;
    xlswrite(xlsfilestr,{'Gene'},sheetstr,['H' num2str(2 * ntopbot + 12)]) ;
    xlswrite(xlsfilestr,{'Count'},sheetstr,['I' num2str(2 * ntopbot + 12)]) ;
    xlswrite(xlsfilestr,{'Gene'},sheetstr,['K' num2str(2 * ntopbot + 12)]) ;
    xlswrite(xlsfilestr,{'Score'},sheetstr,['L' num2str(2 * ntopbot + 12)]) ;

    disp('    Working on Top XLS write') ;
    for iu = 1:nutop ;
      xlswrite(xlsfilestr,caGNtopuniq(vindnumtop(iu)),sheetstr, ...
                           ['A' num2str(2 * ntopbot + 12 + iu)]) ;
      xlswrite(xlsfilestr,vunumtop(vindnumtop(iu)),sheetstr, ...
                           ['B' num2str(2 * ntopbot + 12 + iu)]) ;
      xlswrite(xlsfilestr,caGNtopuniq(vindscoretop(iu)),sheetstr, ...
                           ['D' num2str(2 * ntopbot + 12 + iu)]) ;
      xlswrite(xlsfilestr,vuscoretop(vindscoretop(iu)),sheetstr, ...
                           ['E' num2str(2 * ntopbot + 12 + iu)]) ;
    end ;

    disp('    Working on Bottom XLS write') ;
    for iu = 1:nubottom ;
      xlswrite(xlsfilestr,caGNbottomuniq(vindnumbottom(iu)),sheetstr, ...
                           ['H' num2str(2 * ntopbot + 12 + iu)]) ;
      xlswrite(xlsfilestr,vunumbottom(vindnumbottom(iu)),sheetstr, ...
                           ['I' num2str(2 * ntopbot + 12 + iu)]) ;
      xlswrite(xlsfilestr,caGNbottomuniq(vindscorebottom(iu)),sheetstr, ...
                           ['K' num2str(2 * ntopbot + 12 + iu)]) ;
      xlswrite(xlsfilestr,vuscorebottom(vindscorebottom(iu)),sheetstr, ...
                           ['L' num2str(2 * ntopbot + 12 + iu)]) ;
    end ;
%}

    % Make MargDist Plot of Best 16 Scoring Top Genes
    %    (use lines from MargOverlapSM.m)
    %
    disp('    Working on Top MargDist graphics') ;
    figure(1) ;
    clf ;
    iplot = 0 ;
    for irow = 1:4 ;

      for icol = 1:4 ;

        iplot = iplot + 1 ;
        subplot(4,4,iplot) ;
        paramstruct = struct('icolor',mcolorct, ...
                             'isubpopkde',1, ...
                             'xlabelstr',caGNtopuniq(vindscoretop(iplot))) ;
        vdir = strcmp(caGeneName,caGNtopuniq(vindscoretop(iplot))) ;
        projplot1SM(mdatar,vdir,paramstruct) ;
        vax = axis ;
        if irow == 1 ;
          if icol == 1 ;
            title('Pan Can 2013') ;
          elseif icol == 2 ;
            title([strct ' vs. the rest']) ;
          elseif icol == 3 ;
            title('Marg. Dist. View') ;
          elseif icol == 4 ;
            title('Overall Top Scoring Genes') ;
          end ;
        end ;
        hold on ;
          text(vax(1) + 0.1 * (vax(2) - vax(1)), ...
               vax(3) + 0.9 * (vax(4) - vax(3)), ...
               ['Score = ' num2str(vuscoretop(vindscoretop(iplot))) ...
                '    # = ' num2str(vunumtop(vindnumtop(iplot)))]) ;
        hold off ;

      end ;

    end ;

    orient landscape ;
    savestr = ['PanCan3ip' num2str(ipart) 'TopScoreGenes-MargDist'] ;
    print('-dpsc2',savestr) ;


    % Make MargDist Plot of Best 16 Scoring Bottom Genes
    %
    disp('    Working on Bottom MargDist graphics') ;
    figure(2) ;
    clf ;
    iplot = 0 ;
    for irow = 1:4 ;

      for icol = 1:4 ;

        iplot = iplot + 1 ;
        subplot(4,4,iplot) ;
        paramstruct = struct('icolor',mcolorct, ...
                             'isubpopkde',1, ...
                             'xlabelstr',caGNbottomuniq(vindscorebottom(iplot))) ;
        vdir = strcmp(caGeneName,caGNbottomuniq(vindscorebottom(iplot))) ;
        projplot1SM(mdatar,vdir,paramstruct) ;
        vax = axis ;
        if irow == 1 ;
          if icol == 1 ;
            title('Pan Can 2013') ;
          elseif icol == 2 ;
            title([strct ' vs. the rest']) ;
          elseif icol == 3 ;
            title('Marg. Dist. View') ;
          elseif icol == 4 ;
            title('Overall Bottom Scoring Genes') ;
          end ;
        end ;
        hold on ;
          text(vax(1) + 0.1 * (vax(2) - vax(1)), ...
               vax(3) + 0.9 * (vax(4) - vax(3)), ...
               ['Score = ' num2str(vuscorebottom(vindscorebottom(iplot))) ...
                '    # = ' num2str(vunumbottom(vindnumbottom(iplot)))]) ;
        hold off ;

      end ;

    end ;

    orient landscape ;
    savestr = ['PanCan3ip' num2str(ipart) 'BottomScoreGenes-MargDist'] ;
    print('-dpsc2',savestr) ;


  end ;    %  of ict loop


elseif ipart == 7 ;    %  Pairwise classifications - all MD & DWD directions

  for iCT = 2:6 ;

    mdatai = mdatar(:,mCTflag(iCT,:)) ;
    mcolori = mcolorr(mCTflag(iCT,:)',:) ;
    markerstri = markerstrr(mCTflag(iCT,:)) ;
    CTstri = caCTnamebase{iCT} ;

    for jCT = 1:(iCT - 1) ;

      mdataj = mdatar(:,mCTflag(jCT,:)) ;
      mcolorj = mcolorr(mCTflag(jCT,:)',:) ;
      markerstrj = markerstrr(mCTflag(jCT,:)) ;
      CTstrj = caCTnamebase{jCT} ;

      disp(' ') ;
      disp(['    Comparing Type ' CTstri ' vs. ' CTstrj]) ;

      %  Compute the MD direction
      %
      MDdirn = mean(mdatai,2) - mean(mdataj,2) ;
      MDdirn = MDdirn / norm(MDdirn) ;

      %  Compute the DWD direction
      %
      DWDdirn = DWD2XQ(mdatai,mdataj) ;

      %  Make Scatplot Graphic
      %
      figure(1) ;
      clf ;
      titlecellstr = {{'PanCan, 2013' ...
                       [CTstri ' vs. ' CTstrj] ...
                       ['n_i = ' num2str(size(mdatai,2)) ...
                          ', n_j = ' num2str(size(mdataj,2)) ...
                          ', d = ' num2str(d)]}} ;
      labelcellstr = {{'MD scores' 'DWD scores' 'OPC 1 Scores'}} ;
      savestr = ['PanCan3ip' num2str(ipart) 'MDnDWD-' CTstri 'v' CTstrj] ;
      paramstruct = struct('npcadiradd',-1, ...
                           'icolor',[mcolori; mcolorj], ...
                           'isubpopkde',1, ...
                           'titlecellstr',titlecellstr, ...
                           'labelcellstr',labelcellstr, ...
                           'savestr',savestr, ...
                           'iscreenwrite',1) ;
      scatplotSM([mdatai mdataj],[MDdirn DWDdirn],paramstruct) ;


    end ;

  end ;


elseif ipart == 8 ;    %  Pairwise classifications - all pairwise DiProPerms

  xlssavestr = ['PanCan3ip' num2str(ipart) 'DiProPermOutputs.xlsx'] ;
  xlswrite(xlssavestr,{'Output from PanCan3 - DiProPerm Results'},'DiProPerms','A1') ;
  xlswrite(xlssavestr,{'DWD Z-scores'},'DiProPerms','D3') ;
  xlswrite(xlssavestr,{'MD Z-scores'},'DiProPerms','K3') ;

  for iCT = 2:6 ;

    mdatai = mdatar(:,mCTflag(iCT,:)) ;
    mcolori = mcolorr(mCTflag(iCT,:)',:) ;
    markerstri = markerstrr(mCTflag(iCT,:)) ;
    CTstri = caCTnamebase{iCT} ;

    xlswrite(xlssavestr,{CTstri},'DiProPerms',['A' num2str(iCT + 2)]) ;
    xlswrite(xlssavestr,{CTstri},'DiProPerms',['H' num2str(iCT + 2)]) ;

    for jCT = 1:(iCT - 1) ;

      mdataj = mdatar(:,mCTflag(jCT,:)) ;
      mcolorj = mcolorr(mCTflag(jCT,:)',:) ;
      markerstrj = markerstrr(mCTflag(jCT,:)) ;
      CTstrj = caCTnamebase{jCT} ;

      if jCT == 1 ;
        XLlet1 = 'B' ;
        XLlet2 = 'I' ;
      elseif jCT == 2 ;
        XLlet1 = 'C' ;
        XLlet2 = 'J' ;
      elseif jCT == 3 ;
        XLlet1 = 'D' ;
        XLlet2 = 'K' ;
      elseif jCT == 4 ;
        XLlet1 = 'E' ;
        XLlet2 = 'L' ;
      elseif jCT == 5 ;
        XLlet1 = 'F' ;
        XLlet2 = 'M' ;
      end ;
      xlswrite(xlssavestr,{CTstrj},'DiProPerms',[XLlet1 '9']) ;
      xlswrite(xlssavestr,{CTstrj},'DiProPerms',[XLlet2 '9']) ;

      disp(' ') ;
      disp(['    DiProPerms for Types ' CTstri ' vs. ' CTstrj]) ;

      %  Make DiProPerm Graphic
      %
      figure(1) ;
      clf ;
      axh11 = subplot(2,2,1) ;
      axh12 = subplot(2,2,2) ;
      axh21 = subplot(2,2,3) ;
      axh22 = subplot(2,2,4) ;
      savestr = ['PanCan3ip' num2str(ipart) 'DiProPerms-' CTstri 'v' CTstrj] ;
      paramstruct = struct('mctl',[[1 2]; [2 2]], ...
                           'vaxh',[[axh11 axh12]; [axh21 axh22]], ...
                           'ishowperm',0, ...
                           'nsim',100, ...
                           'nreport',10, ...
                           'icolor',[mcolori(1,:); mcolorj(1,:)], ...
                           'markerstr',[markerstri(1); markerstrj(1)], ...
                           'title1str',[CTstri ' vs. ' CTstrj], ...
                           'savestr',savestr, ...
                           'iscreenwrite',1) ;
      [stat,pval,zscore] = DiProPermSM(mdatai,mdataj,paramstruct) ;

      xlswrite(xlssavestr,zscore(1),'DiProPerms',[XLlet1 num2str(iCT + 2)]) ;
      xlswrite(xlssavestr,zscore(2),'DiProPerms',[XLlet2 num2str(iCT + 2)]) ;


    end ;

  end ;


elseif ipart == 9 ;    %  Pairwise classifications - important genes

  for iCT = 2:6 ;

    mdatai = mdatar(:,mCTflag(iCT,:)) ;
    mcolori = mcolorr(mCTflag(iCT,:)',:) ;
    markerstri = markerstrr(mCTflag(iCT,:)) ;
    CTstri = caCTnamebase{iCT} ;

    for jCT = 1:(iCT - 1) ;

      mdataj = mdatar(:,mCTflag(jCT,:)) ;
      mcolorj = mcolorr(mCTflag(jCT,:)',:) ;
      markerstrj = markerstrr(mCTflag(jCT,:)) ;
      CTstrj = caCTnamebase{jCT} ;

      disp(' ') ;
      disp(['    Comparing Type ' CTstri ' vs. ' CTstrj]) ;

%{
      %  Compute the MD direction
      %
      MDdirn = mean(mdatai,2) - mean(mdataj,2) ;
      MDdirn = MDdirn / norm(MDdirn) ;

      %  Compute the DWD direction
      %
      DWDdirn = DWD2XQ(mdatai,mdataj) ;

      %  Make Scatplot Graphic
      %
      figure(1) ;
      clf ;
      titlecellstr = {{'PanCan, 2013' ...
                       [CTstri ' vs. ' CTstrj] ...
                       ['n_i = ' num2str(size(mdatai,2)) ...
                          ', n_j = ' num2str(size(mdataj,2)) ...
                          ', d = ' num2str(d)]}} ;
      labelcellstr = {{'MD scores' 'DWD scores' 'OPC 1 Scores'}} ;
      savestr = ['PanCan3ip' num2str(ipart) 'MDnDWD-' CTstri 'v' CTstrj] ;
      paramstruct = struct('npcadiradd',-1, ...
                           'icolor',[mcolori; mcolorj], ...
                           'isubpopkde',1, ...
                           'titlecellstr',titlecellstr, ...
                           'labelcellstr',labelcellstr, ...
                           'savestr',savestr, ...
                           'iscreenwrite',1) ;
      scatplotSM([mdatai mdataj],[MDdirn DWDdirn],paramstruct) ;
%}


    end ;

  end ;


end ;





